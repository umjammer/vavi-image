<?xml version="1.0" encoding="UTF-8"?>

<!-- ////////////////////////////////////////////////////////////////////// -->
<!-- Copyright (c) 2002 by Naohide Sano, All rights reserved.               -->
<!--                                                                        -->
<!-- Written by Naohide Sano                                                -->
<!--                                                                        -->
<!-- vavi-image                                                             -->
<!--                                                                        -->
<!-- @author Naohide Sano                                                   -->
<!-- @version 0.00 021116 nsano initial version                             -->
<!--                                                                        -->
<!-- ////////////////////////////////////////////////////////////////////// -->

<project name="vavi-image" default="run" basedir="."
  xmlns:artifact="urn:maven-artifact-ant">

  <path id="maven-ant-tasks.classpath">
    <fileset dir="${user.home}/lib/java">
      <include name="maven-ant-tasks*.jar" />
    </fileset>
  </path>
  <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
           classpathref="maven-ant-tasks.classpath" /> 

  <property environment="env"/>
  <property file="local.properties" />
  <xmlproperty file="pom.xml" />

  <!-- Path Definitions -->
  <path id="project.class.path">
    <fileset refid="maven-ant-tasks.dependency.fileset" />
  </path>

  <!-- prepare -->
  <target name="prepare" description="Preparing">
    <artifact:pom file="pom.xml" id="maven.project" />
    <artifact:dependencies fileSetId="maven-ant-tasks.dependency.fileset">
      <pom refid="maven.project"/>
    </artifact:dependencies>
    <artifact:mvn pom="pom.xml">
      <arg value="-q" />
      <arg value="clean" />
      <arg value="package" />
      <arg value="-DskipTests=true" />
    </artifact:mvn>
  </target>

  <property name="dir.native" value="src/main/native" />
  <property name="dir.build" value="target/classes" />

  <!-- javah -->
  <target name="javah" depends="prepare" description="Makeing Header">
    <javah destdir="${dir.native}">
      <classpath>
        <path refid="project.class.path" />
        <pathelement location="${dir.build}" />
      </classpath>
      <class name="vavi.awt.image.resample.FfmpegResampleOp" />
    </javah>
  </target>

  <!-- gcc cygwin -->
  <target name="compile.native.cygwin" depends="javah" description="コンパイル C (cygming)">
    <apply executable="gcc" dest="${dir.native}" parallel="false">
      <arg value="-c" />
      <arg line="-g -Wall -O2" />
      <arg line="-mno-cygwin"/>
      <arg value="-I." />
      <arg value="-I${ffmpeg.include}/libavformat" />
      <arg value="-I${ffmpeg.include}/libavcodec" />
      <arg value="-I${ffmpeg.include}/libavutil" />
      <arg value="-I${ffmpeg.include}/libswscale" />
      <arg value="-I${mingw.include}" />
      <arg value="-I${w32api.include}" />
      <arg value="-I${jdk.home}/include" />
      <arg value="-I${jdk.home}/include/win32" />
      <arg value="-o"/>
      <targetfile/>
      <srcfile/>
      <fileset dir="${dir.native}" includes="*.c"/>
      <mapper type="glob" from="*.c" to="*.o"/>
    </apply>
  </target>

  <!-- link mingw32 -->
  <target name="link.cygwin" depends="compile.native.cygwin" description="Makeing DLL (cygming)">
    <apply executable="dllwrap" dest="lib">
      <arg value="--add-stdcall-alias" />
      <arg line="--driver-name gcc"/>
      <arg line="-mwindows --target=i386-mingw32" />
      <arg line="-o" />
      <targetfile />
      <srcfile />
      <arg value="${ffmpeg.home}/libavformat/libavformat.a" />
      <arg value="${ffmpeg.home}/libavcodec/libavcodec.a" />
      <arg value="${ffmpeg.home}/libswscale/libswscale.a" />
      <arg value="${ffmpeg.home}/libavutil/libavutil.a" />
      <!--
-->
      <arg value="-lxvidcore" />
      <arg line="-s -mno-cygwin" />
      <fileset dir="${dir.native}" includes="*.o"/>
      <mapper type="glob" from="*.o" to="*.dll"/>
    </apply>
  </target>

  <!-- gcc mac -->
  <target name="compile.native.macosx" depends="javah" description="コンパイル C (macosx)">
    <apply executable="gcc" dest="${dir.native}" parallel="false">
      <arg value="-c" />
      <arg line="-g -Wall -O2 -fomit-frame-pointer -fPIC" />
      <arg line="-arch i386 -arch x86_64" />
      <arg value="-I." />
      <arg value="-I${ffmpeg.include}/libavformat" />
      <arg value="-I${ffmpeg.include}/libavcodec" />
      <arg value="-I${ffmpeg.include}/libavutil" />
      <arg value="-I${ffmpeg.include}/libswscale" />
      <arg value="-I${jdk.home}/include" />
      <arg value="-o"/>
      <targetfile/>
      <srcfile/>
      <fileset dir="${dir.native}" includes="*.c"/>
      <mapper type="glob" from="*.c" to="*.o"/>
    </apply>
  </target>

  <!-- link mac -->
  <target name="link.macosx" depends="compile.native.macosx" description="Makeing DLL (macosx)">
    <apply executable="gcc" dest="lib">
      <arg line="-dynamiclib" />
      <arg line="--add-stdcall-alias" />
      <arg line="-arch i386 -arch x86_64" />
      <arg value="-L${ffmpeg.lib}" />
      <arg value="-lavformat" />
      <arg value="-lavcodec" />
      <arg value="-lswscale" />
      <arg value="-lavutil" />
      <arg value="-o" />
      <targetfile />
      <srcfile />
      <fileset dir="${dir.native}" includes="*.o"/>
      <mapper type="glob" from="*.o" to="lib*.jnilib"/>
    </apply>
    <!-- for Mac OpenJDK -->
    <exec executable="ln" dir="lib" failonerror="no">
      <arg value="-s" />
      <arg value="libFfmpegResampleOpWrapper.jnilib" />
      <arg value="libFfmpegResampleOpWrapper.dylib" />
    </exec>
  </target>

  <!-- gcc linux -->
  <target name="compile.native.linux" depends="javah" description="コンパイル C (linux)">
    <apply executable="gcc" dest="${dir.native}" parallel="false">
      <arg value="-c" />
      <arg line="-g -Wall -O2 -fomit-frame-pointer -fPIC" />
      <arg value="-I." />
      <arg value="-I${ffmpeg.include}/libavformat" />
      <arg value="-I${ffmpeg.include}/libavcodec" />
      <arg value="-I${ffmpeg.include}/libavutil" />
      <arg value="-I${ffmpeg.include}/libswscale" />
      <arg value="-I${my.java.home}/include" />
      <arg value="-I${my.java.home}/include/linux" />
      <arg value="-o"/>
      <targetfile/>
      <srcfile/>
      <fileset dir="${dir.native}" includes="*.c"/>
      <mapper type="glob" from="*.c" to="*.o"/>
    </apply>
  </target>

  <!-- link linux -->
  <target name="link.linux" depends="compile.native.linux" description="Makeing DLL (linux)">
    <apply executable="gcc" dest="lib">
      <arg line="-shared" />
      <arg line="--add-stdcall-alias" />
      <arg value="-L${ffmpeg.lib}" />
      <arg value="-lavformat" />
      <arg value="-lavcodec" />
      <arg value="-lswscale" />
      <arg value="-lavutil" />
      <arg value="-o" />
      <targetfile />
      <srcfile />
      <fileset dir="${dir.native}" includes="*.o"/>
      <mapper type="glob" from="*.o" to="lib*.so"/>
    </apply>
  </target>

  <!-- link -->
  <target name="link" description="link">
  </target>

  <!-- run -->
  <target name="run" depends="prepare" description="show imageio spec">
    <java classname="t146_1" fork="yes">
      <classpath>
        <path refid="project.class.path" />
      </classpath>
      <arg value="${test.146.run.in}" />
    </java>
  </target>

  <!-- t2 -->
  <target name="convert" depends="prepare" description="convert format">
    <java classname="t146_2" fork="yes">
      <classpath>
        <path refid="project.class.path" />
      </classpath>
      <arg value="gif" />
      <arg value="tmp/in.gif" />
      <arg value="tmp/out.gif" />
    </java>
  </target>

  <!-- t3 -->
  <target name="t3" depends="prepare" description="QR">
    <java classname="t146_3" fork="yes">
      <env key="PATH" path="lib" />
      <classpath>
        <path refid="project.class.path" />
      </classpath>
      <arg value="${test.146.t3.content}" />
      <arg value="${test.146.t3.size}" />
    </java>
  </target>

  <!-- t4 -->
  <target name="t4" depends="prepare" description="save QR">
    <java classname="t146_4" fork="yes">
      <env key="PATH" path="lib" />
      <classpath>
        <path refid="project.class.path" />
      </classpath>
      <arg value="${test.146.t4.content}" />
      <arg value="${test.146.t4.size}" />
      <arg value="${test.146.t4.out}" />
    </java>
  </target>

  <!-- t5 -->
  <target name="t5" depends="prepare" description="1D Barcode">
    <java classname="t146_5" fork="yes">
      <classpath>
        <path refid="project.class.path" />
      </classpath>
      <arg value="0123456" />
      <arg value="150" />
      <arg value="true" />
      <arg value="intl2of5" />
    </java>
  </target>

  <!-- t6 -->
  <target name="t6" depends="prepare" description="Image Magik quantize">
    <java classname="vavi.awt.image.quantize.ImageMagikQuantizeOp" fork="yes">
      <classpath>
        <path refid="project.class.path" />
      </classpath>
      <arg value="${test.146.t6.in}" />
    </java>
  </target>

  <!-- t14 -->
  <target name="t14" depends="prepare" description="Jpeg quality">
    <java classname="t146_14" fork="yes">
      <jvmarg value="-Djava.library.path=lib" />
      <classpath>
        <path refid="project.class.path" />
      </classpath>
      <arg value="${test.146.t14.in}" />
    </java>
  </target>

  <!-- t12 -->
  <target name="t12" depends="prepare" description="Scaling. (awt, ffmpeg)">
    <!--
    <echo message="you must export JAVA_HOME=${my.java.home}" />
    <exec executable="open">
      <arg value="/Applications/Utilities/X11.app" />
    </exec>
    <java classname="t146_12" jvm="${my.java.home}/bin/java" fork="yes">
-->
    <java classname="t146_12" fork="yes">
      <jvmarg value="-Djava.library.path=lib:${user.home}/lib/java/Quaqua/dist" />
      <jvmarg value="-Dswing.defaultlaf=ch.randelshofer.quaqua.QuaquaLookAndFeel" />
      <jvmarg value="-d32" />
      <classpath>
        <path refid="project.class.path" />
        <pathelement location="${user.home}/lib/java/Quaqua/dist/quaqua.jar" />
      </classpath>
      <arg value="${test.146.t12.in}" />
    </java>
  </target>

  <!-- nq -->
  <target name="nq" depends="prepare"
          description="run NeuralQuantizer">
    <java classname="TestQuantize4" fork="yes">
      <classpath>
        <path refid="project.class.path" />
      </classpath>
      <arg value="${vavi-image.nq.in}" />
      <arg line="${vavi-image.nq.colors}" />
    </java>
  </target>

</project>

<!-- -->
