<?xml version="1.0" encoding="Shift_JIS"?>

<!-- ////////////////////////////////////////////////////////////////////// -->
<!-- Copyright (c) 2002 by Naohide Sano, All rights reserved.               -->
<!--                                                                        -->
<!-- Written by Naohide Sano                                                -->
<!--                                                                        -->
<!-- vavi-image                                                             -->
<!--                                                                        -->
<!-- @author	Naohide Sano                                                -->
<!-- @version	0.00	021116	nsano	initial version                     -->
<!--                                                                        -->
<!-- ////////////////////////////////////////////////////////////////////// -->

<project name="vavi-image" default="run" basedir="."
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <property file="local.properties" />

  <property name="dir.native" value="src/main/jni" />
  <property name="dir.build" value="target/classes" />

    <!-- クラスパスの定義 -->
  <path id="project.class.path">
    <fileset dir="lib">
      <include name="*.jar" />
    </fileset>
  </path>

  <!-- ターゲットの定義 -->

  <!-- clean -->
  <target name="clean" description="ビルド環境のクリア">
    <delete>
      <fileset dir="${dir.build}">
        <include name="**/*" />
      </fileset>
      <fileset dir="target/test-classes">
        <include name="**/*" />
      </fileset>
    </delete>
    <delete file="lib/FfmpegResampleOpWrapper.dll"/>
    <delete file="lib/libFfmpegResampleOpWrapper.dylib"/>
    <delete>
      <fileset dir="${dir.native}">
        <include name="*.o" />
        <include name="vavi_*.h" />
      </fileset>
    </delete>
  </target>

  <!-- prepare -->
  <target name="prepare" description="prepare">
    <ivy:settings file="ivy-settings.xml" />
    <ivy:convertpom pomFile="pom.xml" ivyFile="ivy.xml" />
    <ivy:retrieve />
  </target>

  <!-- javac 1.4 -->
  <target name="compile.1.4" description="コンパイル 1.4">
    <javac debug="on" source="1.4" target="1.4" destdir="${dir.build}" encoding="MS932">
      <classpath refid="project.class.path" />
      <include name="vavi/imageio/ImageConverter.java" />
      <src path="src/main/java" />
    </javac>
  </target>

  <!-- javac 1.5 -->
  <target name="compile.1.5" description="コンパイル 1.5">
    <javac debug="on" source="1.5" target="1.5" destdir="${dir.build}" encoding="MS932">
      <classpath refid="project.class.path" />
      <include name="**/*.java" />
      <exclude name="**/ImageConverter.java" />
      <exclude name="*.java" />
      <src path="src/main/java" />
    </javac>
  </target>

  <!-- javac -->
  <target name="compile" depends="prepare,compile.1.4,compile.1.5" description="コンパイル">
    <copy todir="${dir.build}">
      <fileset dir="src/main/resources">
        <include name="**/*" />
      </fileset>
    </copy>
  </target>

  <!-- javah -->
  <target name="javah" depends="compile" description="Makeing Header">
    <javah destdir="${dir.native}">
      <classpath>
        <path refid="project.class.path" />
        <pathelement location="${dir.build}" />
      </classpath>
      <class name="vavi.awt.image.resample.FfmpegResampleOp" />
    </javah>
  </target>

  <!-- gcc cygwin -->
  <target name="compile.native.cygwin" depends="javah" description="コンパイル C">
    <apply executable="gcc" dest="${dir.native}" parallel="false">
      <arg value="-c" />
      <arg line="-g -Wall -O2" />
      <arg line="-mno-cygwin"/>
      <arg value="-I." />
      <arg value="-I${ffmpeg.include}/libavformat" />
      <arg value="-I${ffmpeg.include}/libavcodec" />
      <arg value="-I${ffmpeg.include}/libavutil" />
      <arg value="-I${ffmpeg.include}/libswscale" />
      <arg value="-I${mingw.include}" />
      <arg value="-I${w32api.include}" />
      <arg value="-I${jdk.home}/include" />
      <arg value="-I${jdk.home}/include/win32" />
      <arg value="-o"/>
      <targetfile/>
      <srcfile/>
      <fileset dir="${dir.native}" includes="*.c"/>
      <mapper type="glob" from="*.c" to="*.o"/>
    </apply>
  </target>

  <!-- link cygwin -->
  <target name="link.cygwin" depends="compile.native.cygwin" description="Makeing DLL">
    <apply executable="dllwrap" dest="lib">
      <arg value="--add-stdcall-alias" />
      <arg line="--driver-name gcc"/>
      <arg line="-mwindows --target=i386-mingw32" />
      <arg line="-o" />
      <targetfile />
      <srcfile />
      <arg value="${ffmpeg.home}/libavformat/libavformat.a" />
      <arg value="${ffmpeg.home}/libavcodec/libavcodec.a" />
      <arg value="${ffmpeg.home}/libswscale/libswscale.a" />
      <arg value="${ffmpeg.home}/libavutil/libavutil.a" />
<!--
-->
      <arg value="-lxvidcore" />
      <arg line="-s -mno-cygwin" />
      <fileset dir="${dir.native}" includes="*.o"/>
      <mapper type="glob" from="*.o" to="*.dll"/>
    </apply>
  </target>

  <!-- gcc mac -->
  <target name="compile.native" depends="javah" description="コンパイル C">
    <apply executable="gcc" dest="${dir.native}" parallel="false">
      <arg value="-c" />
      <arg line="-g -Wall -O2 -fomit-frame-pointer -fPIC" />
      <arg line="-arch i386 -arch x86_64" />
      <arg value="-I." />
      <arg value="-I${ffmpeg.include}/libavformat" />
      <arg value="-I${ffmpeg.include}/libavcodec" />
      <arg value="-I${ffmpeg.include}/libavutil" />
      <arg value="-I${ffmpeg.include}/libswscale" />
      <arg value="-I${jdk.home}/include" />
      <arg value="-o"/>
      <targetfile/>
      <srcfile/>
      <fileset dir="${dir.native}" includes="*.c"/>
      <mapper type="glob" from="*.c" to="*.o"/>
    </apply>
  </target>

  <!-- link mac -->
  <target name="link" depends="compile.native" description="Makeing DLL">
    <apply executable="gcc" dest="lib">
      <arg line="-dynamiclib" />
      <arg line="--add-stdcall-alias" />
      <arg line="-arch i386 -arch x86_64" />
      <arg value="-L${ffmpeg.lib}" />
      <arg value="-lavformat" />
      <arg value="-lavcodec" />
      <arg value="-lswscale" />
      <arg value="-lavutil" />
      <arg value="-o" />
      <targetfile />
      <srcfile />
      <fileset dir="${dir.native}" includes="*.o"/>
      <mapper type="glob" from="*.o" to="lib*.jnilib"/>
    </apply>
    <!-- for Mac OpenJDK -->
    <exec executable="ln" dir="lib" failonerror="no">
      <arg value="-s" />
      <arg value="libFfmpegResampleOpWrapper.jnilib" />
      <arg value="libFfmpegResampleOpWrapper.dylib" />
    </exec>
  </target>

  <!-- jar -->
  <target name="packaging" depends="compile" description="パッケージング">
    <jar jarfile="target/vavi-image.jar">
      <fileset dir="${dir.build}">
        <include name="**/*" />
      </fileset>
    </jar>
  </target>

  <!-- javac -->
  <target name="compile.tester" depends="compile" description="コンパイル">
    <javac debug="on" deprecation="on" target="1.5" encoding="MS932"
           destdir="target/test-classes">
      <classpath>
        <path refid="project.class.path" />
        <pathelement location="${dir.build}" />
      </classpath>
      <include name="**/*.java" />
      <src path="src/test/java" />
    </javac>
    <copy todir="target/test-classes">
      <fileset dir="src/test/resources">
        <include name="**/*" />
      </fileset>
    </copy>
  </target>

  <!-- run -->
  <target name="run" depends="packaging,compile.tester"
          description="show imageio spec">
    <java classname="t146_1" fork="yes">
      <classpath>
        <path refid="project.class.path" />
        <pathelement location="target/test-classes" />
      </classpath>
      <arg value="${test.146.run.in}" />
    </java>
  </target>

  <!-- t2 -->
  <target name="convert" depends="packaging,compile.tester"
          description="convert format">
    <java classname="t146_2" fork="yes">
      <classpath>
        <path refid="project.class.path" />
        <pathelement location="target/test-classes" />
      </classpath>
      <arg value="gif" />
      <arg value="tmp/in.gif" />
      <arg value="tmp/out.gif" />
    </java>
  </target>

  <!-- t3 -->
  <target name="t3" depends="compile.tester"
          description="QR">
    <java classname="t146_3" fork="yes">
      <env key="PATH" path="lib" />
      <classpath>
        <path refid="project.class.path" />
        <pathelement location="target/test-classes" />
      </classpath>
      <arg value="${test.146.t3.content}" />
      <arg value="${test.146.t3.size}" />
    </java>
  </target>

  <!-- t4 -->
  <target name="t4" depends="compile,compile.tester"
          description="save QR">
    <java classname="t146_4" fork="yes">
      <env key="PATH" path="lib" />
      <classpath>
        <path refid="project.class.path" />
        <pathelement location="target/test-classes" />
      </classpath>
      <arg value="${test.146.t4.content}" />
      <arg value="${test.146.t4.size}" />
      <arg value="${test.146.t4.out}" />
    </java>
  </target>

  <!-- t5 -->
  <target name="t5" depends="compile,compile.tester"
          description="1D Barcode">
    <java classname="t146_5" fork="yes">
      <classpath>
        <path refid="project.class.path" />
        <pathelement location="target/test-classes" />
      </classpath>
      <arg value="0123456" />
      <arg value="150" />
      <arg value="true" />
      <arg value="intl2of5" />
    </java>
  </target>

  <!-- t6 -->
  <target name="t6" depends="compile,compile.tester"
          description="Image Magik quantize">
    <java classname="vavi.awt.image.quantize.ImageMagikQuantizeOp" fork="yes">
      <classpath>
        <path refid="project.class.path" />
        <pathelement location="target/test-classes" />
      </classpath>
      <arg value="${test.146.t6.in}" />
    </java>
  </target>

  <!-- t14 -->
  <target name="t14" depends="compile,compile.tester"
          description="Jpeg quality">
    <java classname="t146_14" fork="yes">
      <jvmarg value="-Djava.library.path=lib" />
      <classpath>
        <pathelement location="target/test-classes" />
        <path refid="project.class.path" />
      </classpath>
      <arg value="${test.146.t14.in}" />
    </java>
  </target>

  <!-- t12 -->
  <target name="t12" depends="compile,compile.tester"
          description="Scaling. (awt, ffmpeg)">
<!--
    <echo message="you must export JAVA_HOME=${java6_32.home}" />
    <exec executable="open">
      <arg value="/Applications/Utilities/X11.app" />
    </exec>
    <java classname="t146_12" jvm="${java6_32.home}/bin/java" fork="yes">
-->
    <java classname="t146_12" fork="yes">
      <jvmarg value="-Djava.library.path=lib:${user.home}/lib/java/Quaqua/dist" />
      <jvmarg value="-Dswing.defaultlaf=ch.randelshofer.quaqua.QuaquaLookAndFeel" /> 
      <jvmarg value="-d32" /> 
      <classpath>
        <pathelement location="target/test-classes" />
        <pathelement location="target/classes" />
        <path refid="project.class.path" />
        <pathelement location="${user.home}/lib/java/Quaqua/dist/quaqua.jar" />
      </classpath>
      <arg value="${test.146.t12.in}" />
    </java>
  </target>

  <!-- -->

  <!-- jar -->
  <target name="packaging.nq" depends="compile,compile.tester"
  	      description="NeuralQuantizer パッケージング">
    <jar jarfile="tmp/nq.jar" manifest="etc/manifest.mf">
      <fileset dir="${dir.build}">
        <include name="vavi/awt/image/quantize/NeuralNet*.class" />
      </fileset>
      <fileset dir="target/test-classes">
        <include name="TestQuantize4*.class" />
        <include name="ImageFrame*.class" />
      </fileset>
    </jar>
  </target>

  <!-- nq -->
  <target name="nq" depends="packaging.nq"
          description="run NeuralQuantizer">
    <java classname="TestQuantize4" fork="yes">
      <classpath>
        <pathelement location="tmp/nq.jar" />
      </classpath>
      <arg value="${vavi-image.nq.in}" />
      <arg line="${vavi-image.nq.colors}" />
    </java>
  </target>

</project>

<!-- -->
